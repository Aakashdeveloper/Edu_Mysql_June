What are aggregate functions?

Perform a calculation on data within a column
and return one result row

Can use group by clauses to group the result 
by or more columns

Can use a having clause in a similar way to a where clause
in as select statement to filter the result set


/////////////
SELECT COUNT(*) FROM customers;
SELECT COUNT(first_name) FROM customers;
SELECT COUNT(*) FROM customers
WHERE first_name IS NULL;

SELECT SUM(no_seats) FROM rooms;
SELECT SUM(no_seats) FROM rooms
WHERE id>1;

SELECT MAX(length_min) FROM films;
SELECT MIN(length_min) FROM films;
SELECT AVG(length_min) FROM films;

SELECT AVG(length_min) FROM films
WHERE length_min >120;

> Count number of unique customers who made a booking in october 2017

SELECT COUNT(DISTINCT(customer_id)) FROM bookings

SELECT customer_id, screening_id, COUNT(id) FROM bookings
GROUP BY customer_id, screening_id


SELECT f.name, s.start_time,c.first_name,c.last_name,COUNT(b.id) FROM films f 
JOIN screenings s ON f.id = s.film_id
JOIN bookings b ON s.id = b.screening_id
JOIN customers c ON c.id = b.customer_id
GROUP BY f.name,c.first_name,c.last_name,s.start_time



SELECT customer_id, screening_id, COUNT(id) FROM bookings
GROUP BY customer_id, screening_id
HAVING customer_id= 10;

//////////////SUBQUERIES//////////////
NON CORRELATED
CORRELATED
//////////////////////

SUBQUERIES aree queries nested within other queries

SELECT id, start_time FROM screenings
WHERE film_id IN(
    SELECT id FROM films WHERE
    length_min >120
)


//////
NON CORRELATED
/////
>>>>The inner query can run independently of the outer query

SELECT id, start_time FROM screenings
WHERE film_id IN(
    SELECT id FROM films WHERE
    length_min >120
)

>>>>Inner query run first and produces a result set, which is 
    than used by the outer query

///////////
CORRELATED
/////////
The inner query cannot run independently of the outer query
The inner query run for every row in the outer query

SELECT screening_id,customer_id,
(
    SELECT COUNT(seat_id) FROM reserved_seat where booking_id = b.id
)
from Booking b

///////////////
MySql functions
///////////////

SELECT CONCAT(first_name,last_name) AS full_name from customers

SELECT CONCAT(first_name,last_name) AS full_name from customers;
SELECT CONCAT(first_name," ",last_name) AS full_name from customers;
SELECT CONCAT("Hi ",first_name," ",last_name," Your emailId is ",email) AS full_name from customers;

var a = "London"
a.substring(3,2)

SELECT substring(name,1,3) As shot_name from customers
SELECT CONCAT(first_name,last_name) AS full_name from customers;
SELECT CONCAT(first_name," ",last_name) AS full_name from customers;
SELECT CONCAT("Hi ",first_name," ",last_name," Your emailId is ",email) AS full_name from customers;

SELECT substring(name,1,3) As short_name from films;
SELECT substring(name,-2,3) As short_name from films;

SELECT UPPER(name) As name from films;
SELECT LOWER(name) As name from films;

SELECT start_time from screenings;
SELECT DATE(start_time) from screenings;

SELECT * FROM screenings
WHERE DATE(start_time) = '2017-10-03';

SELECT * FROM screenings
WHERE DATE(start_time) between '2017-10-03' AND '2017-10-05';

SELECT * FROM screenings
WHERE MONTH(start_time)='10';

SELECT * FROM screenings
WHERE YEAR(start_time)='2017';